<?xml version='1.0' encoding='UTF-8'?>
<project>
  <actions/>
  <description>Run as part of the scala-release-2.11.x-dist flow.&#xd;
&lt;p&gt;&#xd;
Builds and uploads the windows-specific artifacts for a Scala release.&lt;br&gt;&#xd;
&#xd;
Specify a tag that exists on &lt;a href=&quot;https://github.com/scala/scala-dist&quot;&gt;scala/scala-dist&lt;/a&gt;,&lt;br&gt;&#xd;
and that points to a version of scala-dist that&apos;s available in one of the repositories listed in repositories-scala-release (see scala/jenkins-scripts), and sit back.&lt;p&gt;&#xd;
&#xd;
NOTE: the sbt build derives the version to build from the tag, which must thus be of the shape vNN.NN.NN-suffix for version NN.NN.NN-suffix&lt;p&gt;&#xd;
&#xd;
NOTE2: multiple tags on the same commit will lead to havoc -- you&apos;ll have to create a new commit and tag it&#xd;
(or set sbtDistVersionOverride to -Dproject.version=$SCALA_VER)&#xd;
&#xd;
The downloads will be available at http://downloads.typesafe.com/scala/$ver/scala-$ver*</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>dist_ref</name>
          <description>The git ref in scala/scala-dist to use for building the release. Should be the same as the tag used for scala/scala. It usually looks like v2.10.1, or v2.11.0-M3.</description>
          <defaultValue></defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>dist_remote</name>
          <description></description>
          <defaultValue>git://github.com/scala/scala-dist.git</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>scriptsRemote</name>
          <description></description>
          <defaultValue>https://github.com/scala/jenkins-scripts.git</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>sbtDistTarget</name>
          <description>for a dry run, use windows:package-bin</description>
          <defaultValue>s3-upload</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>sbtDistVersionOverride</name>
          <description>may be -Dproject.version=....  to override the version of the dist to build (only for testing, you should use tags for real releases!)
</description>
          <defaultValue></defaultValue>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.21">
      <autoRebuild>false</autoRebuild>
    </com.sonyericsson.rebuild.RebuildSettings>
    <jenkins.plugins.slack.SlackNotifier_-SlackJobProperty plugin="slack@1.2">
      <room></room>
      <startNotification>false</startNotification>
      <notifySuccess>false</notifySuccess>
      <notifyAborted>false</notifyAborted>
      <notifyNotBuilt>false</notifyNotBuilt>
      <notifyUnstable>false</notifyUnstable>
      <notifyFailure>false</notifyFailure>
      <notifyBackToNormal>false</notifyBackToNormal>
    </jenkins.plugins.slack.SlackNotifier_-SlackJobProperty>
    <hudson.plugins.throttleconcurrents.ThrottleJobProperty plugin="throttle-concurrents@1.8.2">
      <maxConcurrentPerNode>0</maxConcurrentPerNode>
      <maxConcurrentTotal>0</maxConcurrentTotal>
      <categories/>
      <throttleEnabled>false</throttleEnabled>
      <throttleOption>project</throttleOption>
      <configVersion>1</configVersion>
    </hudson.plugins.throttleconcurrents.ThrottleJobProperty>
  </properties>
  <scm class="hudson.plugins.git.GitSCM" plugin="git@2.2.1">
    <configVersion>2</configVersion>
    <userRemoteConfigs>
      <hudson.plugins.git.UserRemoteConfig>
        <name>origin</name>
        <url>${dist_remote}</url>
      </hudson.plugins.git.UserRemoteConfig>
    </userRemoteConfigs>
    <branches>
      <hudson.plugins.git.BranchSpec>
        <name>${dist_ref}</name>
      </hudson.plugins.git.BranchSpec>
    </branches>
    <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
    <submoduleCfg class="list"/>
    <extensions>
      <hudson.plugins.git.extensions.impl.CleanCheckout/>
    </extensions>
  </scm>
  <assignedNode>windows</assignedNode>
  <canRoam>false</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>true</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>#!C:/cygwin64/bin/bash -ex

# sbtDistTarget must be supplied
# sbtDistVersionOverride may be -Dproject.version=....  to override the version of the dist to build (only for testing, you should use tags for real releases!)
# sbtLauncher is a global jenkins configuration variable
repositoriesFile="$WORKSPACE/jenkins-scripts/repositories-scala-release"

echo "Using repo config:"
cat "$(/usr/bin/cygpath --unix $repositoriesFile)"

tags="$(git tag --points-at HEAD)"

# version is set by the scala-release-2.11.x-dist build flow, make sure it's consistent with the tag
# this is also a backstop for https://github.com/sbt/sbt-git/issues/35
# ignore when there is no version (job is running outside of the flow)
[[ -z $sbtDistVersionOverride ]] && [[ -n $version ]] && if [ "$tags" != "v$version" ]; then
  echo "Inconsistent tag/version combo detected. Abort-abort."
  exit 255
fi

rm -rf "$(/usr/bin/cygpath --unix $WORKSPACE/.ivy2)"

# want full control over sbt, so invoke the launcher directly
java -Dsbt.log.noformat=true -Dsbt.ivy.home=$WORKSPACE/.ivy2 \
  -Dsbt.override.build.repos=true -Dsbt.repository.config="$repositoriesFile" \
  -jar $sbtLauncher \
  $sbtDistVersionOverride \
  clean update $sbtDistTarget
</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers>
    <hudson.tasks.ArtifactArchiver>
      <artifacts>target/*.msi</artifacts>
      <allowEmptyArchive>false</allowEmptyArchive>
      <onlyIfSuccessful>false</onlyIfSuccessful>
      <fingerprint>false</fingerprint>
      <defaultExcludes>true</defaultExcludes>
    </hudson.tasks.ArtifactArchiver>
  </publishers>
  <buildWrappers/>
</project>